import { PIN_C, PIN_D } from "../../Multiplexing/Dmux4Way/Dmux4Way";
import {
  PIN_E,
  PIN_F,
  PIN_G,
  PIN_H,
} from "../../Multiplexing/Dmux8Way/Dmux8Way";
import { binaryToBoolArray as bin } from "../../../../dataRepresentation/numberBases/simpleBinary";
import {
  getTestName,
  PIN_A,
  PIN_B,
  PIN_OUTPUT,
  PIN_SELECTOR,
} from "../../types";
import Mux8Way16 from "../../Multiplexing/Mux8Way16";
import BinaryBus from "../..//BinaryBus";

interface TestCase {
  a: string;
  b: string;
  c: string;
  d: string;
  e: string;
  f: string;
  g: string;
  h: string;
  sel: string;
  expected: string;
}

// |        a         |        b         |        c         |        d         |        e         |        f         |        g         |        h         |  sel  |       out        |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  000  | 0000000000000000 |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  001  | 0000000000000000 |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  010  | 0000000000000000 |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  011  | 0000000000000000 |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  100  | 0000000000000000 |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  101  | 0000000000000000 |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  110  | 0000000000000000 |
// | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  111  | 0000000000000000 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  000  | 0001001000110100 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  001  | 0010001101000101 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  010  | 0011010001010110 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  011  | 0100010101100111 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  100  | 0101011001111000 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  101  | 0110011110001001 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  110  | 0111100010011010 |
// | 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  111  | 1000100110101011 |

const TEST_CASES: TestCase[] = [
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "000",
    expected: "0000000000000000",
  },
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "001",
    expected: "0000000000000000",
  },
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "010",
    expected: "0000000000000000",
  },
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "011",
    expected: "0000000000000000",
  },
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "100",
    expected: "0000000000000000",
  },
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "101",
    expected: "0000000000000000",
  },
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "110",
    expected: "0000000000000000",
  },
  {
    a: "0000000000000000",
    b: "0000000000000000",
    c: "0000000000000000",
    d: "0000000000000000",
    e: "0000000000000000",
    f: "0000000000000000",
    g: "0000000000000000",
    h: "0000000000000000",
    sel: "111",
    expected: "0000000000000000",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "000",
    expected: "0001001000110100",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "001",
    expected: "0010001101000101",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "010",
    expected: "0011010001010110",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "011",
    expected: "0100010101100111",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "100",
    expected: "0101011001111000",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "101",
    expected: "0110011110001001",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "110",
    expected: "0111100010011010",
  },
  {
    a: "0001001000110100",
    b: "0010001101000101",
    c: "0011010001010110",
    d: "0100010101100111",
    e: "0101011001111000",
    f: "0110011110001001",
    g: "0111100010011010",
    h: "1000100110101011",
    sel: "111",
    expected: "1000100110101011",
  },
];

describe("Mux 8 way 16", () => {
  const mux = new Mux8Way16();
  const receivers = new BinaryBus();
  mux.getBus(PIN_OUTPUT).connect(receivers);

  TEST_CASES.forEach(({ a, b, c, d, e, f, g, h, sel, expected }) => {
    test(getTestName({ a, b, c, d, e, f, g, h, sel, expected }), () => {
      mux.getBus(PIN_A).send(bin(a));
      mux.getBus(PIN_B).send(bin(b));
      mux.getBus(PIN_C).send(bin(c));
      mux.getBus(PIN_D).send(bin(d));
      mux.getBus(PIN_E).send(bin(e));
      mux.getBus(PIN_F).send(bin(f));
      mux.getBus(PIN_G).send(bin(g));
      mux.getBus(PIN_H).send(bin(h));
      mux.getBus(PIN_SELECTOR).send(bin(sel));

      const expectedArr = bin(expected);
      receivers.pins.forEach((r, i) =>
        expect(r.lastOutput).toBe(expectedArr[i])
      );
    });
  });
});
